---
import { getLocaleByPath, useTranslations } from '#lib/i18n/index.ts'
import MetaKey from './MetaKey.astro'

const locale = getLocaleByPath(Astro.url.pathname)
const t = useTranslations(locale)
---

<c-search class="block w-full text-lg">
	<button
		data-open
		class="group flex w-full cursor-pointer items-center gap-2 text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-gray-100"
	>
		<svg
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="size-4"
		>
			<path
				stroke-linecap="round"
				stroke-linejoin="round"
				d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
			></path>
		</svg>
		<div class="">{t('ui.search')}</div>

		<span
			class="flex gap-1 rounded border px-1.5 text-sm text-gray-400 group-hover:text-pink-400"
			><kbd><MetaKey /></kbd><kbd>K</kbd></span
		>
	</button>

	<dialog
		class="top-1/2 left-1/2 w-10/12 max-w-2xl -translate-1/2 animate-[search-appear_.4s_both] rounded-lg bg-white p-6 backdrop:bg-gray-950/30 backdrop:backdrop-blur-sm dark:bg-gray-900"
	>
		<div class="bg-white dark:bg-gray-900" data-dialog-frame>
			<div data-search-container></div>
		</div>
	</dialog>
</c-search>

<script>
	customElements.define(
		'c-search',
		class Search extends HTMLElement {
			#openBtn: HTMLButtonElement
			#dialog: HTMLDialogElement
			#dialogFrame: HTMLElement
			#searchContainer: HTMLElement
			#isOpen = false

			constructor() {
				super()
				this.#openBtn = this.querySelector('button[data-open]')!
				this.#dialog = this.querySelector('dialog')!
				this.#dialogFrame = this.#dialog.querySelector('[data-dialog-frame]')!
				this.#searchContainer = this.querySelector('[data-search-container]')!
			}

			connectedCallback() {
				this.#openBtn.addEventListener('click', this.#handleClickBtn)
				this.#dialog.addEventListener('close', this.#handleClose)
				document.addEventListener('keydown', this.#handleKeydown)

				//@ts-ignore
				new PagefindUI({
					element: this.#searchContainer,
					showImages: false,
				})
			}

			disconnectedCallback() {
				document.removeEventListener('keydown', this.#handleKeydown)
			}

			#handleClickBtn = (e: MouseEvent) => {
				e.stopPropagation()
				this.#open()
			}

			#open() {
				if (this.#isOpen) return
				this.#dialog.showModal()
				document.addEventListener('click', this.#handleClick)
				document.body.toggleAttribute('data-search-open', true)
				this.#isOpen = true
			}

			#handleKeydown = (e: KeyboardEvent) => {
				if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
					this.#isOpen ? this.#dialog.close() : this.#open()
					e.preventDefault()
				}
			}

			#handleClose = () => {
				document.removeEventListener('click', this.#handleClick)
				document.body.toggleAttribute('data-search-open', false)
				this.#isOpen = false
			}

			#handleClick = (e: MouseEvent) => {
				const isLink = 'href' in (e.target || {})
				if (
					isLink ||
					(document.body.contains(e.target as Node) &&
						!this.#dialogFrame.contains(e.target as Node))
				) {
					this.#dialog.close()
				}
			}
		},
	)
</script>

<style>
	c-search {
		--pagefind-ui-scale: 1;
		--pagefind-ui-primary: var(--color-pink-500);
		--pagefind-ui-text: var(--color-gray-900);
		--pagefind-ui-background: var(--color-white);
		--pagefind-ui-border: var(--color-gray-600);
		--pagefind-ui-tag: var(--color-gray-600);
		--pagefind-ui-border-width: 2px;
		--pagefind-ui-border-radius: 8px;
		--pagefind-ui-image-border-radius: 8px;
		--pagefind-ui-image-box-ratio: 3 / 2;
		--pagefind-ui-font: sans-serif;
	}

	:global(.dark) c-search {
		--pagefind-ui-text: var(--color-gray-50);
		--pagefind-ui-background: var(--color-gray-900);
		--pagefind-ui-border: var(--color-gray-400);
		--pagefind-ui-tag: var(--color-gray-400);
	}

	c-search :global(mark) {
		background: var(--color-gray-50);
		color: var(--color-black);
	}

	:global(.dark) c-search :global(mark) {
		background: var(--color-gray-700);
		color: var(--color-white);
	}

	:global(body[data-search-open]) {
		overflow: hidden;
	}

	@keyframes search-appear {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}
</style>
